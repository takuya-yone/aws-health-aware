AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31


Parameters:
  AHADynamoTableArn:
    Type: String
    Default: ""
  AHADynamoTableStreamArn:
    Type: String
    Default: ""

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60
    Tracing: Active


Resources:
  DynamoTriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: 'DynamoTriggerLambdaRole'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/TranslateReadOnly'
        # - 'arn:aws:iam::aws:policy/aws-service-role/AWSSSMOpsInsightsServiceRolePolicy'
      Policies:
        - PolicyName: "AHA-LambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:*"
                Resource: 
                  - !Sub ${AHADynamoTableArn}/stream/*
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: "Allow"
                Action: 
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecretVersionIds"
                  - "secretsmanager:GetSecretValue"
                Resource: 
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:SlackChannelID-p7W8se"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:EventBusName-XPjfY2"
              - Effect: "Allow"
                Action: 
                  - "health:DescribeAffectedAccountsForOrganization"
                  - "health:DescribeAffectedEntitiesForOrganization"
                  - "health:DescribeEventDetailsForOrganization"
                  - "health:DescribeEventsForOrganization"
                  - "health:DescribeEventDetails"
                  - "health:DescribeEvents"
                  - "health:DescribeEventTypes"
                  - "health:DescribeAffectedEntities"
                  - "organizations:ListAccounts"
                  - "organizations:DescribeAccount"
                Resource: "*"
              - Effect: "Allow"
                Action: 
                  - "ssm:ListOpsItemEvents"
                  - "ssm:GetOpsItem"
                  - "ssm:DisassociateOpsItemRelatedItem"
                  - "ssm:AssociateOpsItemRelatedItem"
                  - "ssm:CreateOpsItem"
                  - "ssm:ListOpsItemRelatedItems"
                  - "ssm:DescribeOpsItems"
                  - "ssm:UpdateOpsItem"
                  - "ssm:AddTagsToResource"
                  - "ssm:RemoveTagsFromResource"
                  - "ssm:ListTagsForResource"
                Resource: "*"
              - Effect: "Allow"
                Action: 
                  - "dynamodb:ListTables"
                Resource: 
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: "Allow"
                Action: 
                  - "ses:SendEmail"
                Resource: 
                  - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: "Allow"
                Action: 
                  - "dynamodb:UpdateTimeToLive"
                  - "dynamodb:PutItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:UpdateTable"
                  - "dynamodb:GetRecords"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AHA-Deployment-DynamoDBTable-968VOP84UULQ"
                  - !GetAtt AccountConfigTable.Arn
              - Effect: "Allow"
                Action: 
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:GetRecords"
                  - "dynamodb:ListStream"
                  - "dynamodb:DescribeStream"
                Resource: 
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/AHA-Deployment-DynamoDBTable-968VOP84UULQ/stream/*"
              - Effect: "Allow"
                Action: 
                  - "events:PutEvents"
                Resource: 
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/health-bus"

  AccountConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:  "AHA-Custom-AccountConfig"
      AttributeDefinitions: 
        - AttributeName: AccountID
          AttributeType: S
      KeySchema:
        - AttributeName: AccountID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  DynamoTriggerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Role: !GetAtt DynamoTriggerLambdaRole.Arn
      CodeUri: DynamoTrigger/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:33
      Architectures:
        - x86_64
      Environment:
        Variables:
          DYNAMO_ACCOUNT_CONFIG_TABLE_NAME: !Ref AccountConfigTable
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !Ref AHADynamoTableStreamArn
            BatchSize: 1
            MaximumRetryAttempts: 0
            StartingPosition: LATEST
            # FilterCriteria:
            #   Filters:
            #     - Pattern: '{"eventName": ["INSERT"]}'

  DynamoTriggerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DynamoTriggerFunction}
      RetentionInDays: 365

  # LogsMetricFilter:
  #   Type: "AWS::Logs::MetricFilter"
  #   Properties:
  #     FilterPattern: "ERROR"
  #     LogGroupName: !Ref DynamoTriggerFunctionLogGroup
  #     MetricTransformations: 
  #       - MetricName: "Error-Count1"
  #         MetricNamespace: "AHA-CustomLambda-Error1"
  #         MetricValue: "1"

  # CloudWatchAlarm:
  #   Type: "AWS::CloudWatch::Alarm"
  #   Properties:
  #     AlarmName: "AHA-Custom-Error1"
  #     ActionsEnabled: true
  #     # AlarmActions: 
  #     # - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:slack-notify-rd-itsm-error"
  #     MetricName: "Error-Count"
  #     Namespace: "AHA-CustomLambda-Error1"
  #     Statistic: "SampleCount"
  #     Period: 60
  #     EvaluationPeriods: 1
  #     DatapointsToAlarm: 1
  #     Threshold: 0
  #     ComparisonOperator: "GreaterThanThreshold"
  #     TreatMissingData: "missing"

  SandboxFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Role: !GetAtt DynamoTriggerLambdaRole.Arn
      CodeUri: SandboxFunction/
      Handler: app.lambda_handler
      Runtime: python3.9
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:33
      Architectures:
        - x86_64

  SandboxFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SandboxFunction}
      RetentionInDays: 365